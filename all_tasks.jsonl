{"name": "shorten_url", "entrypoint": "shorten_url", "signature": "def shorten_url(url: str) -> str:", "examples": [{"input": "'https://a'", "output": "'a'"}, {"input": "'http://abc'", "output": "'abc'"}, {"input": "'abc'", "output": "'abc'"}]}
{"name": "apply_operations", "entrypoint": "apply_operations", "signature": "def apply_operations(nums: List[int], ops: List[str]) -> int:", "examples": [{"input": "[ 1, 2, 3 ], [ '+', '*' ]", "output": "9"}, {"input": "[ 16, 56, 8, 5, 4 ], [ '+', '/', '-', '-' ]", "output": "0"}, {"input": "[ 1, 5, 2, 3 ], [ '+', '-', '%' ]", "output": "1"}]}
{"name": "add_up", "entrypoint": "add_up", "signature": "def add_up(arr):", "examples": [{"input": "[ [ 'one', 2, 3, 4 ] ]", "output": "9"}, {"input": "[ [ 3, 'hello', 3.4 ] ]", "output": "6.4"}, {"input": "[ [ ] ]", "output": "0"}]}
{"name": "subtract_add", "entrypoint": "subtract_add", "signature": "def subtract_add(lst):", "examples": [{"input": "['1', '2', '3', '4']", "output": "-2"}, {"input": "['0', '2']", "output": "-2"}, {"input": "['0', '0']", "output": "0"}, {"input": "[ ]", "output": "0"}]}
{"name": "convert", "entrypoint": "convert", "signature": "def convert(lst):", "examples": [{"input": "[0, 1, 2, 3]", "output": "['ABCD']"}, {"input": "[0, -1, 1, -1, 2]", "output": "['A', 'B', 'C']"}, {"input": "[1, 1, 1, -1, 25, 25, 25, -1, 0, 1, 2]", "output": "['BBB', 'ZZZ', 'ABC']"}]}
{"name": "order_strings", "entrypoint": "order_strings", "signature": "def order_strings(lst):", "examples": [{"input": "['c', 'b', 'a', 'd']", "output": "['b', 'a', 'd', 'c']"}, {"input": "[1, 2, 3, 4, 5, 6]", "output": "[3, 2, 1, 6, 5, 4]"}, {"input": "['hello', 'aaa', 'bbb', 'ccc']", "output": "['bbb', 'aaa', 'hello', 'ccc']"}]}
{"name": "add_int", "entrypoint": "add_int", "signature": "def add_int(lst, num):", "examples": [{"input": "['hello', 'aaa', 'bbb', 'ccc', 1, 4], 5", "output": "['hello5', 'aaa5', 'bbb5', 'ccc5', 6, 9]"}, {"input": "[8, 56, 8, '5', '4'], 1", "output": "[9, 57, 9, '51', '41']"}, {"input": "['hello', 'aaa', 'bbb', ['list'], 1, 4], 5", "output": "['hello5', 'aaa5', 'bbb5', ['list'], 6, 9]"}]}
{"name": "check_prime", "entrypoint": "check_prime", "signature": "def check_prime(num):", "examples": [{"input": "'2'", "output": "True"}, {"input": "'8'", "output": "False"}, {"input": "'9'", "output": "False"}, {"input": "'11'", "output": "True"}]}
{"name": "remove_odd", "entrypoint": "remove_odd", "signature": "def remove_odd(lst):", "examples": [{"input": "[4.3, 4, 5, 2, 7]", "output": "[4.3, 4, 2]"}, {"input": "[1.1, 2.2, 3.3]", "output": "[1.1, 2.2, 3.3]"}, {"input": "[3, 5, 7]", "output": "[]"}]}
{"name": "create_list", "entrypoint": "create_list", "signature": "def create_list(dt, lst):", "examples": [{"input": "{'a': 'b', 't': 'd'}, ['a', 't', 'c']", "output": "['b', 'd', None]"}, {"input": "{1: 'a', 2: 'b', 3: 'c'}, [1, 5, 3]", "output": "['a', None, 'c']"}, {"input": "{3 : 't', 4: 'r', 5: 'e'}, ['a', 'b', 'c']", "output": "[None, None, None]"}]}
{"name": "has_qu", "entrypoint": "has_qu", "signature": "def has_qu(lst):", "examples": [{"input": "[\"A\", \"B\", \"C\"]", "output": "False"}, {"input": "[\"A\", \"Q\", \"C\"]", "output": "True"}, {"input": "[\"A\", \"U\", \"C\"]", "output": "True"}, {"input": "[\"Q\", \"U\"]", "output": "True"}]}
{"name": "planets_mass", "entrypoint": "planets_mass", "signature": "def planets_mass(planets):", "examples": [{"input": "{'Venus': 10, 'Mercury': 5, 'Sun': 100}", "output": "15"}, {"input": "{'Pluto': 30, 'Venus': 10, 'Mercury': 5, 'Sun': 100}", "output": "15"}, {"input": "{'Pluto': 100}", "output": "0"}]}
{"name": "student_grades", "entrypoint": "student_grades", "signature": "def student_grades(students, grades):", "examples": [{"input": "{'Alice': 20, 'Bob': 11}, {20: ['A','A'], 11: ['A','B'], 21: ['B']}", "output": "{'Alice': ['A','A'], 'Bob': ['A','B']}"}, {"input": "{'Alice': 20}, {20: [], 11: ['A','B'], 21: ['A-']}", "output": "{'Alice': []}"}, {"input": "{'Sam': 21, 'Ari': 67, 'Chris': 23}, {67: [], 23: ['A'], 21: ['B','B']}", "output": "{'Sam': ['B', 'B'], 'Ari':[], 'Chris':['A'] }"}]}
{"name": "times_with", "entrypoint": "times_with", "signature": "def times_with(meetings):", "examples": [{"input": "[ [30, ['Alice', 'Bob', 'Carol']] ]", "output": "{ 'Alice': 30, 'Bob': 30, 'Carol': 30 }"}, {"input": "[ [30, ['Alice', 'Bob', 'Carol']], [20, ['Alice', 'Bob']] ]", "output": "{ 'Alice': 50, 'Bob': 50, 'Carol': 30 }"}, {"input": "[ [10, ['Alice', 'Bob']], [5, ['Carol']] ]", "output": "{'Alice': 10, 'Bob': 10, 'Carol': 5}"}]}
{"name": "pig_latin", "entrypoint": "pig_latin", "signature": "def pig_latin(words):", "examples": [{"input": "['this', 'is', 'a', 'great', 'example']", "output": "['histay', 'is', 'a', 'reatgay', 'exampleay']"}, {"input": "['hello']", "output": "['ellohay']"}, {"input": "['bye']", "output": "['yebay']"}]}
{"name": "count_consecutive", "entrypoint": "count_consecutive", "signature": "def count_consecutive(word):", "examples": [{"input": "'elephant'", "output": "1"}, {"input": "'cheese'", "output": "2"}, {"input": "'helllloo'", "output": "4"}]}
{"name": "meeps_morps", "entrypoint": "meeps_morps", "signature": "def meeps_morps(items):", "examples": [{"input": "['Meep', 'Morp', 'Meep', 'Meep', 'Suitcase', 'Kind', 'Morp']", "output": "[3,2]"}, {"input": "['Meep', 'Meep', 'Suitcase', 'Kind']", "output": "[2,0]"}, {"input": "['Suitcase', 'Kind', 'Carrot', 'Meat', 'Morpling']", "output": "[0,0]"}]}
{"name": "print_time", "entrypoint": "print_time", "signature": "def print_time(day,hour):", "examples": [{"input": "'Sat', 12", "output": "'weekend'"}, {"input": "'Sun', 12", "output": "'weekend'"}, {"input": "'Mon', 9", "output": "'weekday'"}, {"input": "'Tue', 23", "output": "'weekday'"}, {"input": "'Wed', 0", "output": "'sleeping'"}, {"input": "'Thu', 8", "output": "'sleeping'"}]}
{"name": "mod_end", "entrypoint": "mod_end", "signature": "def mod_end(words, ending):", "examples": [{"input": "['jumping', 'bumping', 'singing', 'picking'], 'ing'", "output": "['jumps', 'bumps', 'sings', 'picks']"}, {"input": "['dreaded', 'edited', 'heated'], 'ed'", "output": "['dreads', 'edits', 'heats']"}, {"input": "['nearer', 'closer'], 'er'", "output": "['nears', 'closs']"}]}
{"name": "increaseScore", "entrypoint": "increaseScore", "signature": "def increaseScore(score):", "examples": [{"input": "-10", "output": "10"}, {"input": "1", "output": "10"}, {"input": "10", "output": "11"}, {"input": "15", "output": "16"}, {"input": "20", "output": "21"}]}
{"name": "getSeason", "entrypoint": "getSeason", "signature": "def getSeason(month):", "examples": [{"input": "'January'", "output": "'winter'"}, {"input": "'April'", "output": "'spring'"}, {"input": "'August'", "output": "'summer'"}, {"input": "'October'", "output": "'fall'"}]}
{"name": "assessVowels", "entrypoint": "assessVowels", "signature": "def assessVowels(s):", "examples": [{"input": "'I ate an apple'", "output": "['I', 'a', 'e', 'a', 'a', 'e']"}, {"input": "'Another string here'", "output": "['A', 'o', 'e', 'i', 'e', 'e']"}, {"input": "'cAbbAge'", "output": "['A', 'A', 'e']"}, {"input": "''", "output": "[]"}]}
{"name": "hasHorizontalWin", "entrypoint": "hasHorizontalWin", "signature": "def hasHorizontalWin(board, letter):", "examples": [{"input": "[['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'X'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X'", "output": "True"}, {"input": "[['', '',  'X', 'O', 'X'],\n['X', 'X', 'X', 'X', 'O'],\n['X', 'X', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X'", "output": "False"}, {"input": "[['', '',  'X', 'O', 'X'],\n['X', 'X', 'O', 'X', 'O'],\n['X', 'O', 'X', 'O', 'O'],\n['',  '',  '',  'X', 'O'],\n['',  '',  '',  '',  'O']],\n'X'", "output": "False"}]}
{"name": "readingIceCream", "entrypoint": "readingIceCream", "signature": "def readingIceCream(lines):", "examples": [{"input": "[\"peppermint\\tice cream\\t3\",\n\"lemon\\tfrozen yogurt\\t10\",\n\"pumpkin\\tice cream\\t2.5\",\n\"monster\\tice cream\\t21\"]", "output": "36.5"}, {"input": "[\"salty\\tfrozen yogurt\\t10\"]", "output": "10"}, {"input": "[\"salty\\tfrozen yogurt\\t0\"]", "output": "0"}]}
{"name": "findHorizontals", "entrypoint": "findHorizontals", "signature": "def findHorizontals(puzzle,wordList):", "examples": [{"input": "[\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"cat\",\"dog\",\"tea\",\"party\"]", "output": "{\"cat\":0, \"tea\":2}"}, {"input": "[\"ztac\",\"zzzz\",\"teaz\",\"part\",\"zzzz\"],\n[\"to\",\"apple\",\"ape\",\"party\"]", "output": "{}"}, {"input": "[\"as\", \"be\", \"sa\", \"it\"],\n[\"it\"]", "output": "{'it': 3}"}]}
{"name": "partialWordle", "entrypoint": "partialWordle", "signature": "def partialWordle(guessList,hiddenWord):", "examples": [{"input": "[\"zzzz\",\"bbbb\",\"lyre\",\"part\",\"apes\"],\n'pare'", "output": "[0,0,4,6,3]"}, {"input": "[\"aaaa\",\"wall\",\"woah\",\"deal\",\"howl\"],\n\"word\"", "output": "[0,2,4,1,3]"}, {"input": "[\"real\",\"hill\",\"ream\",\"meal\",\"curl\"],\n\"roll\"", "output": "[4,4,2,2,3]"}]}
{"name": "andCount", "entrypoint": "andCount", "signature": "def andCount(andGrid):", "examples": [{"input": "['--&-','----','-&--','---&',]", "output": "3"}, {"input": "['&&&-','-----','--&&&','-----',]", "output": "6"}, {"input": "['----', '----', '----', '----']", "output": "0"}]}
{"name": "set_chars", "entrypoint": "set_chars", "signature": "def set_chars(s,c,l):", "examples": [{"input": "'Everybody loves apples.', \"u\", [0,2,6,16]", "output": "'uvurybudy loves upples.'"}, {"input": "'ice cream is the best', 'q', [1,21]", "output": "'iqe cream is the best'"}, {"input": "'toast and jam and toast and ham', 't', []", "output": "'toast and jam and toast and ham'"}]}
{"name": "altText", "entrypoint": "altText", "signature": "def altText(s):", "examples": [{"input": "'I love to see dolphins swim.'", "output": "'I LoVe tO SeE DoLpHiNs sWiM.'"}, {"input": "'computers'", "output": "'CoMpUtErS'"}, {"input": "'t'", "output": "'T'"}]}
{"name": "changeSection", "entrypoint": "changeSection", "signature": "def changeSection(s,i):", "examples": [{"input": "'Turn towards the door.', 9", "output": "'awot nruTrds the door.'"}, {"input": "'the tall sail', 13", "output": "'lias llat eht'"}, {"input": "'establishing', 1", "output": "'establishing'"}]}
{"name": "edit_col", "entrypoint": "edit_col", "signature": "def edit_col(mat,i,n):", "examples": [{"input": "[[1,2,3], [4,5,6], [7,8,9]], 1, 6", "output": "[[1,6,3], [4,6,6], [7,6,9]]"}, {"input": "[[1,1,1,1,1], [1,1,1,1,1]], 0, 9", "output": "[[9,1,1,1,1], [9,1,1,1,1]]"}, {"input": "[[2,3]], 1, 1", "output": "[[2,1]]"}]}
{"name": "combine", "entrypoint": "combine", "signature": "def combine(l1,l2):", "examples": [{"input": "[[1,2,3],[4,5,6],[7,8,9]],[[10,20,30],[40,50,60],[70,80,90]]", "output": "[[1,2,3,10,20,30],[4,5,6,40,50,60],[7,8,9,70,80,90]]"}, {"input": "[[9,8,7]], [[0,1,2]]", "output": "[[9,8,7,0,1,2]]"}, {"input": "[[2,3],[1,1],[10,11],[4, 5]],[[1, 1],[14, 15],[3, 2],[77, 87]]", "output": "[[2,3,1,1],[1,1,14,15],[10,11,3,2],[4,5,77,87]]"}]}
{"name": "pattern", "entrypoint": "pattern", "signature": "def pattern(value):", "examples": [{"input": "3", "output": "[[1,2,3],[1,2,3],[1,2,3]]"}, {"input": "4", "output": "[[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]"}, {"input": "2", "output": "[[1,2],[1,2]]"}]}
{"name": "reduce", "entrypoint": "reduce", "signature": "def reduce(val):", "examples": [{"input": "'^^1-1^^'", "output": "'__1-1__'"}, {"input": "'~^--^~'", "output": "'~_--_~'"}, {"input": "'|O.0|'", "output": "'|O.0|'"}]}
{"name": "fib", "entrypoint": "fib", "signature": "def fib(n):", "examples": [{"input": "1", "output": "True"}, {"input": "13", "output": "True"}, {"input": "21", "output": "True"}, {"input": "19", "output": "False"}]}
{"name": "add_word", "entrypoint": "add_word", "signature": "def add_word(word, line_number, map):", "examples": [{"input": "'bright', 1, {'twas': [1]}", "output": "{'twas': [1], 'bright': [1]}"}, {"input": "'five', 5, {'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5]}", "output": "{'one': [1], 'three': [3, 3, 3, 5], 'five': [3, 5, 5, 5, 5, 5]}"}, {"input": "'laughing', 7, {'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6]}", "output": "{'i': [1, 6], 'heard': [1], 'a': [1, 4], 'asked': [6], 'laughing': [7]}"}]}
{"name": "check_for_aspen", "entrypoint": "check_for_aspen", "signature": "def check_for_aspen(trees):", "examples": [{"input": "{\"Oak\": 3, \"Birch\": 5, \"Elm\": 2}", "output": "\"Nope\""}, {"input": "{\"Aspen\": 7, \"Beech\": 15}", "output": "\"Yup\""}, {"input": "{\"Beech\": 8, \"Maple\": 2, \"Aspen\": 3}", "output": "\"Yup\""}]}
{"name": "multisplit", "entrypoint": "multisplit", "signature": "def multisplit(s,chars,sep):", "examples": [{"input": "\"a man! wow- the dog, much hat! much hair!\",['-','!','?',','],'~'", "output": "'a man~ wow~ the dog~ much hat~ much hair~'"}, {"input": "'celestial teas: a guide',[' ',':'],'!'", "output": "'celestial!teas!!a!guide'"}, {"input": "'celestial teas: a guide',[],'!'", "output": "'celestial teas: a guide'"}]}
{"name": "sortedBooks", "entrypoint": "sortedBooks", "signature": "def sortedBooks(books, writer):", "examples": [{"input": "[{'author': 'Austen', 'book': 'Emma', 'year': 1815},\n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}, \n{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}, \n{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813}], \n'Austen'", "output": "[{'author': 'Austen', 'book': 'Pride and Prejudice', 'year': 1813},\n{'author': 'Austen', 'book': 'Emma', 'year': 1815}, \n{'author': 'Austen', 'book': 'Persuasion', 'year': 1818}]"}, {"input": "[{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915},\n  {'author': 'Austen', 'book': 'Persuasion', 'year': 1818}], \n  'Woolf'", "output": "[{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}]"}, {"input": "[{'author': 'Woolf', 'book': 'The Voyage Out', 'year': 1915}],\n  'Austen'", "output": "[]"}]}
{"name": "sortBySuccessRate", "entrypoint": "sortBySuccessRate", "signature": "def sortBySuccessRate(nominations):", "examples": [{"input": "[{'nominee': 'Jones', 'wins': 28, 'noms': 80}, \n{'nominee': 'Beyonc\u00e9',  'wins': 28, 'noms': 79}, \n{'nominee': 'Krauss',  'wins': 27, 'noms': 42}]", "output": "[{'nominee': 'Krauss', 'wins': 27, 'noms': 42, 'success': 0.64}, \n{'nominee': 'Jones', 'wins': 28, 'noms': 80, 'success': 0.35}, \n{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}]"}, {"input": "[{'nominee': 'Babyface','wins': 11, 'noms': 49},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41}, \n{'nominee': 'Thomas', 'wins': 11, 'noms': 38}]", "output": "[{'nominee': 'Thomas', 'wins': 11, 'noms': 38, 'success': 0.29},\n{'nominee': 'Swift', 'wins': 11, 'noms': 41, 'success': 0.27},\n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]"}, {"input": "[{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79},\n {'nominee': 'Babyface','wins': 11, 'noms': 49}]", "output": "[{'nominee': 'Beyonc\u00e9', 'wins': 28, 'noms': 79, 'success': 0.35}, \n{'nominee': 'Babyface', 'wins': 11, 'noms': 49, 'success': 0.22}]"}]}
{"name": "layoverTrips", "entrypoint": "layoverTrips", "signature": "def layoverTrips(flights, start):", "examples": [{"input": "[{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'JFK', 'dest':'LAX', 'hrs':1.0},\n{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n{'origin':'JFK', 'dest':'ATL', 'hrs':1.0}], 'BOS'", "output": "['ATL','LAX']"}, {"input": "[{'origin':'BOS', 'dest':'ORD', 'hrs':2.0}, \n{'origin':'BOS', 'dest':'JFK', 'hrs':1.0},\n{'origin':'ORD', 'dest':'SEA', 'hrs':1.0}], 'ORD'", "output": "[]"}, {"input": "[{'origin':'LAX', 'dest':'SEA', 'hrs':1.0},\n {'origin':'SEA', 'dest':'JFK', 'hrs':2.0},\n {'origin':'SEA', 'dest':'ATL','hrs':1.0}], 'LAX'", "output": "['ATL','JFK']"}]}
{"name": "sort_physicists", "entrypoint": "sort_physicists", "signature": "def sort_physicists(scientists):", "examples": [{"input": "[[\"Youyou\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]", "output": "['Peiris', 'Ghez', 'Strickland']"}, {"input": "[[\"Ghez\",56,\"Physics\"],[\"Peiris\",48,\"Physics\"],[\"Strickland\",62,\"Physics\"]]", "output": "['Peiris', 'Ghez', 'Strickland']"}, {"input": "[[\"Taylor\",59,\"Computer Science\"],[\"Tu\",91,\"Chemistry\"],[\"Ghez\",56,\"Physics\"]]", "output": "['Ghez']"}]}
{"name": "find_multiples", "entrypoint": "find_multiples", "signature": "def find_multiples(start,stop,factor):", "examples": [{"input": "1,100,20", "output": "[20, 40, 60, 80, 100]"}, {"input": "10, 30, 5", "output": "[10, 15, 20, 25, 30]"}, {"input": "1000,2000,177", "output": "[1062, 1239, 1416, 1593, 1770, 1947]"}]}
{"name": "makeN", "entrypoint": "makeN", "signature": "def makeN(height, char):", "examples": [{"input": "3, 'Y'", "output": "\"YY  Y\\nY Y Y\\nY  YY\\n\""}, {"input": "7, 'L'", "output": "\"LL      L\\nL L     L\\nL  L    L\\nL   L   L\\nL    L  L\\nL     L L\\nL      LL\\n\""}, {"input": "0, 'L'", "output": "\"\""}]}
{"name": "total_bill", "entrypoint": "total_bill", "signature": "def total_bill(grocery_list, sales_tax):", "examples": [{"input": "[['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.07", "output": "15.44"}, {"input": "[['apples', 6, 0.99],['milk', 1, 1.49],['bread', 2, 3.50]], 0.0", "output": "14.43"}, {"input": "[['bread', 2, 3.50]], 0.5", "output": "10.5"}]}
{"name": "translate", "entrypoint": "translate", "signature": "def translate(lexicon,sentence):", "examples": [{"input": "{\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three cats\"", "output": "'je aime mes trois chats'"}, {"input": "{\"one\":\"un\", \"two\":\"deux\", \"three\":\"trois\", \"four\":\"quatre\",\n  \"I\":\"je\", \"you\":\"tu\", \"and\":\"et\", \"cats\":\"chats\", \"love\":\"aime\",\n  \"like\":\"aime\", \"my\":\"mes\"}, \n  \"I like my three marmots\"", "output": "'je aime mes trois UNK'"}, {"input": "{\"one\":\"ett\", \"two\":\"tva\", \"three\":\"tre\", \"four\":\"fyra\"},\n\"five six seven eight\"", "output": "'UNK UNK UNK UNK'"}]}
{"name": "topScores", "entrypoint": "topScores", "signature": "def topScores(lst):", "examples": [{"input": "[[76, 'Matt'], [80, 'Rachel'], [100, 'Penelope'], [50, 'Pete'], [99, 'Alex']]", "output": "['Penelope', 'Alex', 'Rachel']"}, {"input": "[[92, 'Kip'], [76, 'Matt'], [80, 'Sam'], [100, 'Ben'], [99, 'Alex'], [97, 'Ro'], [65, 'Hans'], [95, 'Ira']]", "output": "['Ben', 'Alex', 'Ro', 'Ira', 'Kip']"}, {"input": "[[65, 'Bob'], [65, 'Rachel'], [33, 'Alex']]", "output": "[]"}]}
{"name": "averageStarCount", "entrypoint": "averageStarCount", "signature": "def averageStarCount(lst):", "examples": [{"input": "['57555', '37312', '*', '****', '*']", "output": "2.0"}, {"input": "['57555', '37', '**', '***', '*']", "output": "1"}, {"input": "['111', '1111', '1111']", "output": "0.0"}, {"input": "['*', '*']", "output": "1.0"}, {"input": "['*', 'O']", "output": "0.5"}]}
{"name": "generateCardDeck", "entrypoint": "generateCardDeck", "signature": "def generateCardDeck(suits, vals):", "examples": [{"input": "['S', 'H', 'D'], ['1', '2', 'A']", "output": "['D1', 'D2', 'DA', 'H1', 'H2', 'HA',  'S1', 'S2', 'SA']"}, {"input": "['H', 'D'], ['6', 'Q', 'J', '2']", "output": "['D2', 'D6', 'DJ', 'DQ', 'H2','H6', 'HJ', 'HQ']"}, {"input": "['H'], ['2']", "output": "['H2']"}]}
{"name": "reverseWords", "entrypoint": "reverseWords", "signature": "def reverseWords(words):", "examples": [{"input": "['eat', 'tree']", "output": "['eert', 'tae']"}, {"input": "['ax', 'by', 'chaz']", "output": "['xa', 'yb', 'zahc']"}, {"input": "['by', 'chaz', 'ax']", "output": "['xa', 'yb', 'zahc']"}]}
{"name": "percentWin", "entrypoint": "percentWin", "signature": "def percentWin(guess,answers):", "examples": [{"input": "['1', '1', 'X', '2'], ['1', '1', '1', '2']", "output": "'75%'"}, {"input": "['2', 'X', 'X'], ['2', '2', '2']", "output": "'33%'"}, {"input": "['2', '1', '2', '1', '2'], ['2', '1', '2', '1', '2']", "output": "'100%'"}]}
{"name": "correctNumberofPlayers", "entrypoint": "correctNumberofPlayers", "signature": "def correctNumberofPlayers(teams):", "examples": [{"input": "[['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\", \"Rolfo\"]]", "output": "True"}, {"input": "[['Brian', \"Ertz\", \"Long\", \"Mewis\", \"Press\"], ['Falk', 'Glas', \"Seger\", \"Hurtig\"]]", "output": "False"}, {"input": "[['Brian',\"Ertz\",\"Long\", \"Mewis\",\"Press\"], ['Falk','Glas',\"Seger\",\"Hurtig\",\"Rolfo\"], [\"Bartoli\",\"Linari\",\"Gama\",\"Galli\",\"Caruso\"]]", "output": "True"}]}
{"name": "exp", "entrypoint": "exp", "signature": "def exp(lst, val):", "examples": [{"input": "[1, 2, 3], 1", "output": "[1,2,3]"}, {"input": "[2,2,2], 3", "output": "[8,8,8]"}, {"input": "[2], 2", "output": "[4]"}]}
{"name": "laugh", "entrypoint": "laugh", "signature": "def laugh(size):", "examples": [{"input": "4", "output": "\"haaaa haaa haa ha\""}, {"input": "1", "output": "\"ha\""}, {"input": "3", "output": "\"haaa haa ha\""}]}
